{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"week4","provenance":[],"authorship_tag":"ABX9TyONvfF2mVMg5Eg0gGlCTbdG"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"9lbkPJZ5jCVQ","colab_type":"code","colab":{}},"source":["# Understanding the Image Generator"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OE-RImmekheN","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.optimizers import RMSprop"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dekhYzaFkILJ","colab_type":"code","colab":{}},"source":["# instantiate the image generator\n","#passing rescale to normalize the data\n","train_datagen= ImageDataGenerator(rescale=1./255)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nUbpUzifmA-K","colab_type":"code","colab":{}},"source":["# You can then call the flow from directory method on it to get it to \n","#load images from that directory and its sub-directories.\n","train_generator= train_datagen.flow_from_directory(\n","    train_dir,\n","    target_size=(300,300),\n","    batch_size=128,\n","    class_mode='binary'\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TYLMIHKmrQSA","colab_type":"code","colab":{}},"source":["#sigmoid is great for binary classification"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SOOnONoFQt7d","colab_type":"text"},"source":[" notice that there are three sets of convolution pooling layers at the top. This reflects the higher complexity and size of the images. "]},{"cell_type":"code","metadata":{"id":"O7BWJJBGrVM-","colab_type":"code","colab":{}},"source":["model=tf.keras.models.Sequential([\n","  tf.keras.layers.Conv2D(16, (3,3) , activation='relu',input_shape=(300,300,3))\n","  tf.keras.layers.MaxPooling(2,2),\n","  tf.keras.layers.Conv2D(32, (3,3) , activation='relu'),\n","  tf.keras.layers.MaxPooling(2,2),\n","  tf.keras.layers.Conv2D(64, (3,3) , activation='relu'),\n","  tf.keras.layers.MaxPooling(2,2),\n","  tf.keras.Flatten(),\n","  tf.keras.Dense(512, activation='relu'),\n","  tf.keras.Dense(1, activation='sigmoid')                                 \n","])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GuYMVlOUcjTp","colab_type":"code","colab":{}},"source":["#35x35x64 at the time of flattening( when it has just come out of the convolutions)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hQivZ7I0RC-7","colab_type":"code","colab":{}},"source":["#Sigmoid id great for binary functions where one class \n","#will tend towards zero and the other class tending towards one. "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5AGRGMsxbZI2","colab_type":"text"},"source":["RMSprop is where you can adjust the learning rate to experiment with performance. "]},{"cell_type":"code","metadata":{"id":"ias6csHUSopj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":199},"executionInfo":{"status":"error","timestamp":1599108546138,"user_tz":420,"elapsed":654,"user":{"displayName":"Henry Ssembatya","photoUrl":"","userId":"05835713183770896924"}},"outputId":"0642a344-cf33-4008-f3ac-03411f571040"},"source":["model.compile(loss='binary_crossentropy',\n","              optimizer=RMSprop(lr=0.001),\n","              metrics=['acc'])"],"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-42329559168b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m model.compile(loss='binary_crossentropy',\n\u001b[0m\u001b[1;32m      2\u001b[0m               \u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mRMSprop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.001\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m               metrics=['acc'])\n","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}]},{"cell_type":"code","metadata":{"id":"07X0azfveKDu","colab_type":"code","colab":{}},"source":["# there are 1024 images \n","#in the training directory and we are loading them 128 at a atime"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y2y8NhsTcJ1C","colab_type":"code","colab":{}},"source":["1024 images=()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hcfFcMh-S-mR","colab_type":"code","colab":{}},"source":["history=model.fit_generator(\n","    train_generator,\n","    step_per_epoch=8,\n","    epochs=15,\n","    validation_data=validation_generator,\n","    validation_steps=8,\n","    verbose=2\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BCkCNQrFeKBB","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}